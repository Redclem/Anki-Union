#separator:tab
#html:false
#notetype column:1
#deck column:2
Basique Maths	L3::Algorithmique::Général	Types de problèmes	3 types de problèmes: - Construction de solution - Optimisation - Décision
Basique Maths	L3::Algorithmique::Général	"""Efficace"" en algorithmique"	"Un algorithme est ""efficace"" s'il est en temps polynomial sur une machine de Turing déterministe."
Basique Maths	L3::Algorithmique::Général	Quelques paradigmes d'algorithmique	- Diviser pour régner - Gloutons - Programmation dynamique - Recherche locale - Optimisation linéaire - Randomisés
Basique Maths	L3::Algorithmique::Général	Stratégies de réduction en NP-Complétude	- Approximation - Algos exponentiels exacts - Algos paramétrés
Basique Maths	L3::Algorithmique	Complexité / Algorithme paramétré	Complexité / Algorithme avec des conditions supplémentaires sur les entrées et sorties.
Basique Maths	L3::Algorithmique::Général	Exemples à vérifier sur tout problème	Petite valeurs et petites dimensions.
Basique Maths	L3::Algorithmique::Général	Nombre de noeuds interne d'un arbre binaire strict à \(n\) feuilles	Un arbre binaire strict à \(n\) feuilles a \(n - 1\) noeuds internes (y compris racine).
Basique Maths	L3::Algorithmique::Général	Nombre minimal de comparaisons pour un tri	Il faut au minimum \(\lceil \log_2n!\rceil\) comparaisons pour trier un tableau à \(n!\) éléments dans le pire cas. En effet il y a \(n!\) permutations possibles à départager.
Basique Maths	L3::Algorithmique::Général	Caractérisation algébrique de la connexité	Un graphe est connexe si et seulement si sa matrice d'incidence est de rang \(n-1\) dans \(\mathbb F_2\).
Basique Maths	L3::Algorithmique::Général	Lemme sur les graphes connexes	Tout graphe connexe \(G\) possède un sommet \(x\) tel que \(G\setminus \{x\}\) est connexe.
Basique Maths	L3::Algorithmique::Général	Exemple d'algorithme diviser pour régner	Algorithme de Karatsuba en calcul algébrique.
Basique Maths	L3::Algorithmique::Général	Meilleure puissance pour le calcul matriciel	La meilleure puissance pour le calcul matriciel est notée \(\omega\), la meilleure complexité est \(n^\omega\).
Basique Maths	L3::Algorithmique::Général	Complexité de l'algorithme de Strassen pour la multiplication matricielle	Avec l'algorithme de Strassen, la complexité de la multiplication matricielle est \(\mathcal O(n^{\log_27})\).
Basique Maths	L3::Algorithmique::Général	Master Theorem	Avec une complexité récursive de la forme \(T(n) = aT(\frac nb) + f(n)\), avec \(c^* = \log_ba\) - Si \(f = o(n^c)\), \(c< c^*\), alors \(T(n) = \Theta(n^{c^*})\) - Si \(f(n) = \mathcal O(n^{c^*} \log^kn)\), alors \(T(n) = \mathcal O(n^{c^*} \log^{k+1}n)\) - Si \(n^{c^*} = o(f(n))\) (i.e. \(f(n) = \Omega(n^c)\) avec \(c > c^*\)), avec la condition de régularité supplémentaire : APCR, \(af(\frac{n}{b}) \le \varepsilon f(n)\), \(\varepsilon \in ]0, 1[\); alors \(T(n) = \Theta(f(n))\).
Basique Maths	L3::Algorithmique::Général	Algorithme: médiane des médianes	- Calculer les médianes des segments de 5 éléments du tableau - Calculer la vraie médiane de ces médianes - Partitionner selon cette médiane - Appeler récursivement sur la moitié contenant la médiane Cette dernière moitié contient au plus 30% des éléments du tableau, ce qui garantit une complexité linéaire. Algorithme en \(O(n)\)
Basique Maths	L3::Algorithmique::Général	Algorithme des deux points les plus proches dans le plan	- Trier selon \(x\) - Dans chaque moitié séparée par \(x_m\) (médiane), trouver la paire la plus proche. Garder la plus proche des deux, distance \(d\). - Trier les éléments de \(x \in [x_m - d, x_m + d]\) par \(y\). - Tester si une paire est plus proche que \(d\). S'il y en a une, les éléments sont d'écart inférieur à 7 dans le tri. Algorithme en \(O(n\log n)\).
Basique Maths	L3::Algorithmique::Général	Algorithme glouton	La structure générale de l'algorithme glouton est: - Trier \(X\) par ordre décroissant de \(w\) - \(Y \gets \varnothing\) - Pour tout \(x \in X\)   - Si \(Y \cup \{x\} \in S\) alors \(Y \gets Y \cup \{x\}\)   - Retourner \(Y\)
Basique Maths	L3::Algorithmique::Général	Matroïde	\(S\) est un matroïde ssi: - \(\varnothing \in S\) - \(\forall A \in S, \mathcal P(A) \subseteq S\) (clôture par sous-ensemble) - \(\forall A,B \in S\) et \(|A| < |B|\) alors il existe \(b \in B\setminus A\) tel que \(A \cup \{b\} \in S\). (Échange)
Basique Maths	L3::Algorithmique::Général	Caractérisation Matroïde Glouton	\(S\) est un matroïde si et seulement si pour toute fonction \(w\), l'algorithme glouton retourne une solution optimale.
Basique Maths	L3::Algorithmique::Général	Indépendant dans un graphe	Un indépendant dans un graphe est un ensemble de sommets deux à deux non adjacents.
Basique Maths	L3::Algorithmique::Général	Algorithme de Floyd-Warshall	- Pour \(k, i, j\) de \(1\) à \(n\) (itérés dans cet ordre)   - \(d_{ij} = \min(d_{ij}, d_{ik} + d_{kj})\) Retourne la matrice des plus courtes distances (sauf cycle de poids nég), \(\mathcal O(n^3)\).
Basique Maths	L3::Algorithmique::Général	Classe NP	Classe de problèmes de décision; 2 définitions équivalentes: - Certificat polynomial en la taille de l'entrée et vérifiable en temps polynomial en la taille de l'entrée - Décidable par une machine de Turing non déterministe en temps polynomial.
Basique Maths	L3::Algorithmique::Général	Quelques problèmes NP	- PREMIER et NON PREMIER - SOMME (Un nombre est une somme d'éléments d'un tableau) - 3-COLORIABLE
Basique Maths	L3::Algorithmique::Optimisation	Problème de décision associé	Le problème de décision associé à un problème d'optimisation est: - Pour la minimisation : est-ce que la valeur de mon problème est inférieure ou égale à \(k\)? - Pour la maximisation : est-ce que la valeur de mon problème est supérieure ou égale à \(k\)?
Basique Maths	L3::Algorithmique::Optimisation	Problème d'optimisation NP-difficile	Un problème d'optimisation est NP-difficile si le problème de décision associé l'est.
Basique Maths	L3::Algorithmique::Optimisation	Algorithme de \(C\)-approximation	Pour \(C > 1\), un algorithme de \(C\)-approximation (\(C\)-opt) d'un problème d'optimisation retourne une solution au plus \(C\) fois supérieure à l'optimum.
Basique Maths	L3::Algorithmique::Optimisation	APX-difficile	Un problème est APX-difficile s'il est NP-difficile de calculer une \(C\)-approximation (\(C\)-apx) pour \(C\) fixé.
Basique Maths	L3::Algorithmique::Optimisation	PTAS	Un PTAS est un algorithme d'approximation qui est polynomial pour tout \(\varepsilon > 0\).
Basique Maths	L3::Algorithmique::Problèmes NP-complets	Clique	CLIQUE: - Entrée: Un graphe \(G\) et un entier \(k\) - Sortie: Vrai s'il existe une clique de taille \(k\) dans \(G\) CLIQUE est NP-complet. Réduction depuis 3-SAT: Un sommet par litéral. Des littéraux de clauses différentes sont reliés sauf \(x_i\) et \(\bar x_i\). Satisfiable s'il existe une clique de taille le nombre de clauses.
Basique Maths	L3::Algorithmique::Problèmes NP-complets	Indépendant	INDEPENDANT: - Entrée: Un graphe \(G\) et un entier \(k\) - Sortie: Vrai s'il existe un indépendant de taille \(k\) (sous-graphe sans arête) INDEPENDANT est NP-complet. Réduction depuis CLIQUE: Complémenter, une clique devient un indépendant.
Basique Maths	L3::Algorithmique::Problèmes NP-complets	Vertex Cover	VERTEX COVER - Entrée: Graphe \(G\), entier \(k\) - Sortie: Vrai s'il existe une couverture des arêtes par les sommets (vertex cover) de \(G\) de taille \(k\). VERTEX COVER est np-complet. Réduction depuis indépendant: un indépendant de taille \(k\) existe si une vertex-cover de taille \(|V|-k\) existe (complémentaire d'un indépendant max est une vertex cover).
Basique Maths	L3::Algorithmique::Problèmes NP-complets	Couverture	COUVERTURE - Entrée: Ensembles \(V; S_1, \dots, S_n \subseteq V\), \(k \in \N\) - Sortie: Vrai si \(V\) est l'union d'au plus \(k\) ensembles \(S_1\): \(\exists I\subseteq[n], V = \bigcup_{i = 1}^nS_i, |I| \le k\). COUVERTURE est NP-complet. Réduction depuis VERTEX COVER: on couvre l'ensemble d'arêtes avec les ensembles d'arêtes incidentes à un sommet.
Basique Maths	L3::Algorithmique::Problèmes NP-complets	Somme	SOMME - Entrée: Entiers \(q_1, \dots,q_n\) et \(s\) - Sortie: Vrai s'il existe \(I \subseteq[n], s = \sum_{i \in I}q_i\). SOMME est NP-complet Réduction depuis SAT, avec un entier par variable ou négation de variable, codé habilement en binaire.
Basique Maths	L3::Algorithmique::Problèmes NP-complets	Sac à dos	SAC A DOS - Entrée: \(((x_i,p_i))_{1 \le i \le n}, v, p\) - Sortie: Vrai s'il existe \(I \subseteq [n], \sum_{i \in I}v_i \ge v \wedge\sum_{i \in I}p_i \le p\). SAC A DOS est NP-complet Par réduction depuis SOMME: L'instance \((q_i), s\) de SOMME est équivalente à l'instance \((q_i,q_i), s, s\) de SAC A DOS.
