#separator:tab
#html:false
#notetype column:1
#deck column:2
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Programme séquentiel / concurrent	Un programme est dit séquentiel si ses instructions sont exécutées l'une après l'autre, toujours dans le même ordre. Il est dit concurrent s'il est composé de plusieurs unités séquentielles, e.g. fil d'exécution (thread)
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Instruction atomique	Une instruction est dite atomique si elle est exécutée d'un seul bloc, sans interruption.
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Section critique	On appelle section critique une section du code qui lit ou écrit des données partagées par plusieurs fils.
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Exclusion mutuelle, absence de famine, équité, absence d'interblocage	- Exclusion mutuelle: deux fils ne peuvent pas se situer mutuellement en section critique - Absence de famine: chaque fil qui veut rentrer en section critique y parvient en un temps fini - Équité: chaque fil a la même probabilité d'entrer en section critique - Absence d'interblocage: si un ou plusieurs fils veulent entrer en section critique, l'un d'entre eux y parvient en temps fini
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Relation famine / interblocage	Absence de famine implique absence d'interblocage
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Mutex	Un mutex est un objet de synchronisation disposant de: - création - verrouillage - déverrouillage * Aucun fil ne peut terminer le verouillage d'un mutex verrouillé. * Seul le dernier fil qui l'a verrouillé peut déverrouiller le mutex.
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Algorithme de Peterson	L'algorithme de Peterson pour le mutex est le suivant: - Créer : renvoyer {attente : [faux, faux], tour = 0} - Déverouiller:  * m.tour <- 1 - t  * m.attente[t] <- faux - Verouiller:  * m.attente[t] = vrai  * m.tour <- 1 - t  * Tant que m.tour != t et m.attente[1-t] : attendre
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Correction de l'algorithme de Peterson	L'algorithme de peterson respecte l'exclusion mutuelles, l'absence d'interblocage et l'absence de famine
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Algorithme de la boulangerie de Lamport	Mutex en deux tableaux : un indique qui attend, l'autre la priorité - Déverouiller:  * m.attente[t] <- faux - Verouiller:  * m.attente[t] <- vrai  * m.ticket[t] <- max(m.ticket) + 1  * Tant qu'il existe t' tel que (m.ticket[t'], t') < (m.ticket[t], t) et m.attente[t] : attendre
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Correction de la boulangerie de Lamport	L'algorithme de la boulangerie de Lamport satisfait l'exclusion mutuelle, l'absence d'interblocage et l'absence de famine.
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Sémaphore	Un sémaphore est un outil de synchronisation permettant: - initialisation à une valeur donnée - incrémenter - décrémenter
Basique Maths	Seconde année::Informatique::Concurrence et synchronisation	Compteur d'un sémaphore et fils en attente	Si le compteur d'un sémaphore est négatif, sa valeur absolue est le nombre de fils en attente.
