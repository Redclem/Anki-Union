#separator:tab
#html:false
#notetype column:1
#deck column:2
Basique Maths	Seconde année::Informatique::Graphes	Nombres d'arêtes d'un graphe non orienté selon les degrés	Dans un graphe non orienté, \( 2|A| = \sum\limits_{s \in S}d(s)\).
Basique Maths	Seconde année::Informatique::Graphes	Parcours préfixe	Ordre obtenu en parcourant un graphe en profondeur, en marquant chaque sommet en l'atteignant la première fois
Basique Maths	Seconde année::Informatique::Graphes	Parcours postfixe	Ordre obtenu en parcourant un graphe en profondeur, en marquant chaque sommet après avoir terminé le parcours depuis celui ci
Basique Maths	Seconde année::Informatique::Graphes	Intersection des intervalles \([pre(s), post(s)]\)	Dans un graphe orienté, \( \forall (s,t) \in S^2, [pre(s), post(s)] \text{ et }[pre(t), post(t)]\) sont disjoints, ou l'un est inclus dans l'autre
Basique Maths	Seconde année::Informatique::Graphes	Caractérisation d'un cycle par les parcours	Dans un graphe \( G=(S,A) \) orienté, les psse: - \( G \) contient un cycle - Il existe \( (s,t) \in A \) telle que \( post(s) < post(t)\)
Basique Maths	Seconde année::Informatique::Graphes	Ordre topologique	Dans un DAG, un ordre topologique des sommets de \( G \) est un ordre total \( \prec \) tel que s'il existe une arête de \( s \) à \( t \) , alors \( s \prec t \) . Si les sommets de \( G\) sont placés de gauche à droite dans un ordre topologique, toutes les arêtes pointent de la gauche vers la droite.
Basique Maths	Seconde année::Informatique::Graphes	Ordre topologique par le parcours	Soit \( G \) un DAG. L'ordre inverse du parcours postfixe de \( G\) en est un ordre topologique.
Basique Maths	Seconde année::Informatique::Graphes	Métagraphe	Le métagraphe d'un graphe orienté est le graphe orienté des composantes fortement connexes, avec une arête entre deux composantes ssi il existe une arête entre deux de leur sommets dans le sens correspondant. Le métagraphe de \( G \) est noté \( CFC(G)\)
Basique Maths	Seconde année::Informatique::Graphes	Nature du métagraphe	Soit \( G \) un graphe orienté. \( CFC(G)\) est un DAG.
Basique Maths	Seconde année::Informatique::Graphes	CFC source par le parcours postfixe	Avec \( G \) un graphe orienté, le dernier sommet d'un parcours postfixe de \( G \) est dans une CFC source de \( CFC(G)\).
Basique Maths	Seconde année::Informatique::Graphes	Graphe transposé	Le graphe transposé d'un graphe orienté est le même graphe avec les arêtes retournées:  \( (s,t) \in A^T \Leftrightarrow (t,s) \in A\).
Basique Maths	Seconde année::Informatique::Graphes	Métagraphe du graphe transposé	Pour tout graphe orienté \( G \) , \( CFC(G^T) = CFC(G)^T\).
Basique Maths	Seconde année::Informatique::Graphes	Algorithme de Kosaraju	Soit \( G \) une graphe orienté - Calculer le graphe transposé \( G^T \)  - Calculer le parcours postfixe de \( G^T \)  - Poser l'ordre inverse \( l \) de ce parcours - Pour chaque sommet \( s \) de \( l \) dans l'ordre, numéroter les sommets atteints par un parcours depuis \( s\) qui ne sont pas déja numérotés.
Basique Maths	Seconde année::Informatique::Graphes	Complexité de l'algorithme de Kosaraju	L'algorithme de Kosaraju peut être implémenté en \( \mathcal O(|S| + |A|)\)
Basique Maths	Seconde année::Informatique::Graphes	Complexité de 2-SAT	Le problème 2-SAT est résoluble en temps linéaire en la taille de la formule
Basique Maths	Seconde année::Informatique::Graphes	Graphe d'implication	Pour une formule \( \varphi \) en \( k \) -FNC sur l'ensemble de variables \( \mathcal V = \{v_1, \dots, v_n\} \) , le graphe d'implication de \( \varphi \) noté \( G_\varphi \) est défini par: - \( S = \mathcal V\cup \overline{ \mathcal V} \) , où \( \overline{\mathcal V} \) est l'ensemble des négations des variables de \( \mathcal V \) .  - \( A = \{(\overline {l_1}, l_2)|(l_1 \vee l_2)\text { est une clause de }\varphi\} \cup \{(\overline {l_2}, l_1)|(l_1 \vee l_2)\text { est une clause de }\varphi\}\)
Basique Maths	Seconde année::Informatique::Graphes	Interprétation d'un chemin dans le graphe d'implication	S'il existe un chemin de \( l_1 \) à \( l_2 \) dans \( G_\varphi \) , alors \( \varphi \models l_1 \to l_2\)
Basique Maths	Seconde année::Informatique::Graphes	Caractérisation de la satisfaisabilité par le graphe d'implication	 \( \varphi \) est satisfiable ssi aucune CFC de \( G_\varphi\) ne contient une variable et sa négation.
Basique Maths	Seconde année::Informatique::Graphes	Arbre	Graphe non orienté connexe sans cycle
Basique Maths	Seconde année::Informatique::Graphes	Connexité / caractère acyclique et cardinal	Soit \( G = (S,A) \) un graphe non orienté: - si \( G \) est connexe, \( |A| \ge |S| - 1 \)  - si \( G \) est acyclique, \( |A| \le |S| - 1\)
Basique Maths	Seconde année::Informatique::Graphes	Caractérisation des arbres	Soit \( G = (S,A) \) un graphe non orienté. Les psse: - \( G \) est un arbre - \( G \) est connexe avec \( |S| - 1 \) arêtes - \( G \) est acyclique avec \( |S| - 1\) arêtes
Basique Maths	Seconde année::Informatique::Graphes	Arbre couvrant	Soit \( G \) non orienté. Un arbre couvrant de \( G \) est un sous-graphe de \( G \) de même ordre que \( G\) qui est un arbre.
Basique Maths	Seconde année::Informatique::Graphes	Poids d'un arbre couvrant	Somme des poids des arêtes de l'arbre.
Basique Maths	Seconde année::Informatique::Graphes	Algorithme de Kruskal	Soit \( G = (S,A,f) \) un graphe non orienté connexe - On créée \( B = \varnothing\) - On parcourt les arêtes par ordre croissant de poids, en ajoutant chaque arête si elle ne créée pas de cycle
Basique Maths	Seconde année::Informatique::Graphes	Validité de l'algorithme de Kruskal	L'algorithme de Kruskal applique à \( G \) renvoie un arbre couvrant minimal de \( G\).
Basique Maths	Seconde année::Informatique::Graphes	Complexité de l'algorithme de Kruskal	L'algorithme de Kruskal appliqué à \( G = (S,A,f) \) a une complexité \( \mathcal O(|A|\log|S|)\)
Basique Maths	Seconde année::Informatique::Graphes	Algorithme A*	Pour un graphe pondéré \( G = (S,A,f) \) : - On initialise tout les coûts - Tant qu'il reste des sommets non traités:  - On traite le sommet minimisant \( cout(s) + h(s) \) , c'est à dire pour tout voisin \( t \) de \( s \) :  - si \( cout(s) + f(s,t) < cout(t) \) , il devient le nouveau coût de \( t \) et \( s\) devient son prédécésseur
Basique Maths	Seconde année::Informatique::Graphes	Heuristique consistante / admissible pour A*	Une heuristique est: - consistante ssi \( \forall(s,t) \in S^2, h(s) \le d(s,t) + h(t) \)  - admissible ssi \( \forall s \in S, h(s) \le d(s,s_f) \) , où \( s_f\) est le sommet d'arrivée
Basique Maths	Seconde année::Informatique::Graphes	CS pour l'admissibilité d'une heuristique consistante	Une heuristique consistante est admissible si \( h(s_f) = 0\)
Basique Maths	Seconde année::Informatique::Graphes	Validité de A* selon l'heuristique	Si l'heuristique est admissible, A* est garanti de trouver une solution optimale à la recherche du plus court chemin.
Basique Maths	Seconde année::Informatique::Graphes	Couplage	Un couplage d'un graphe non orienté est un ensemble d'arêtes sans sommets en commun.
Basique Maths	Seconde année::Informatique::Graphes	Couplage maximal	Un couplage \( C \) est maximal si pour tout arête \( a \notin c, C \cup \{a\}\) n'est pas un couplage
Basique Maths	Seconde année::Informatique::Graphes	Couplage maximum	Couplage de cardinal maximum
Basique Maths	Seconde année::Informatique::Graphes	Relation couplage maximal et maximum	Un couplage maximum est maximal
Basique Maths	Seconde année::Informatique::Graphes	Chemin alternant et augmentant	Soit \( G = (S,A) \) un graphe non orienté et \( C \subset A \) un couplage de \( G \) . On appelle: - Chemin alternant un chemin dont les arêtes sont alternativement dans \( C \) et \( A \setminus C \)  - Chemin augmentant un chemin alternant qui commence et termine par des sommets libres pour \( C\).
Basique Maths	Seconde année::Informatique::Graphes	Théorème de Berge	Un couplage \( C \) est maximum ssi il n'existe pas de chemin augmentant pour \( C\).
Basique Maths	Seconde année::Informatique::Graphes	Graphe orienté associé à un couplage dans un graphe biparti	Avec \( G =(X \sqcup Y ,A) \) biparti et \( C \) un couplage de \( G \) , le graphe orienté associé à \( C \) noté \( G_C = (S', A') \) est défini par: - \( S' = S\cup \{s,t\} \)  - pour tout \( x\in X, (s,x) \in A' \) ssi \( s \) n'est pas apparié dans \( C \)  - pour tout \( y\in Y, (y,t) \in A' \) ssi \( t \) n'est pas apparié dans \( C \)  - \( \forall (x,y) \in A \) avec \( x \in X, y \in Y \) , \( (x,y) \in A' \) ssi \( \{x,y\} \notin C \) et \( (y,x) \in A' \) ssi \( \{x,y\} \in C\)
Basique Maths	Seconde année::Informatique::Graphes	Caractérisation des chemins augmentants de \(C\) par les chemins dans \(G_c\)	Avec \( G =(S,A) \) biparti et \( C \) un couplage de \( G \) , il existe un chemin augmentant pour \( C \) ssi il existe un chemin de \( s \) à \( t \) dans \( G_c\) et ces chemins correspondent (en retirant les extrémités de ce dernier)
Basique Maths	Seconde année::Informatique::Graphes	Complexité de la recherche de couplage maximum	L'algorithme de recherche de couplage maximum dans un graphe biparti \( G=  (S,A) \) s'effectue avec une complexité \( \mathcal O(|S||A|)\)
